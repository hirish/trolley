// Generated by CoffeeScript 1.6.3
(function() {
  var EatListRecipe, Ingredient, Ingredients, Recipe, Recipes, hideKeyboard, selected, switchTab;

  Ingredient = Backbone.Model.extend({
    defaults: {
      id: 0,
      name: null,
      amount: 0,
      isVolume: false
    }
  });

  Ingredients = Backbone.Collection.extend({
    model: Ingredient
  });

  Recipe = Backbone.Model.extend({
    defaults: {
      id: 0,
      name: null,
      url: null,
      ingredients: new Ingredients,
      imageUrl: null,
      servingSize: 2,
      isStarred: false,
      rating: 0,
      description: "This is a description"
    },
    attributeObject: function() {
      return {
        name: this.get('name'),
        imageUrl: this.get('imageUrl'),
        isStarred: this.get('isStarred'),
        rating: this.get('rating'),
        description: this.get('description'),
        url: this.get('url')
      };
    }
  });

  Recipes = Backbone.Collection.extend({
    model: Recipe
  });

  EatListRecipe = Backbone.Model.extend({
    defaults: {
      quantityModifier: 1,
      baseRecipe: new Recipe,
      ingredients: new Ingredients,
      user: null
    }
  });

  hideKeyboard = function() {
    document.activeElement.blur();
    return $("input").blur();
  };

  $('#searchForm').on('change', 'input[name=servings]', function() {
    var selected;
    selected = $.trim($(this).parent('label').text());
    $('button[data-target=#servingSelector]').text(selected);
    return $('#servingSelector').collapse('hide');
  });

  selected = '#eat-now';

  switchTab = function(e) {
    $('.navbar-collapse').collapse('hide');
    $(this).tab('show');
    $(selected).hide();
    selected = $(this).attr('href');
    return $(selected).fadeIn(150);
  };

  $(function() {
    var anotherBolognese, bolognese, bologneseIngredients, createRecipeFromJSON, curry, eatlist, errorBox, errorHandler, errorTemplate, finalBolognese, historyHandler, historyRecipeTemplate, historyRecipesBox, loadHistory, myBolognese, pasta, renderHistoryRecipe, renderRecipe, search, searchBox, searchResultHandler, searchResultTemplate, searchResultsBox, throttledSearch, userId;
    $('#tab-switch li a').click(switchTab);
    window.userId = userId = 1;
    pasta = new Ingredient({
      id: 1,
      name: "Spaghetti",
      amount: 150,
      isVolume: false
    });
    bologneseIngredients = new Ingredients([pasta]);
    curry = new Recipe({
      id: 1,
      name: "Curry",
      imageUrl: "http://d1jrw5jterzxwu.cloudfront.net/sites/default/files/article_media/curry.jpg",
      ingredients: bologneseIngredients,
      servingSize: 2,
      isStarred: false,
      rating: 5,
      description: "I really like curry."
    });
    bolognese = new Recipe({
      id: 1,
      name: "Spaghetti Bolognese",
      imageUrl: "http://upload.wikimedia.org/wikipedia/commons/e/e5/Heston_Blumenthal's_Perfect_Spaghetti_Bolognese.jpg",
      ingredients: bologneseIngredients,
      servingSize: 2,
      isStarred: false,
      rating: 5,
      description: "This is a really delicious bolognese sauce made with the finest truffles."
    });
    myBolognese = new EatListRecipe({
      baseRecipe: bolognese,
      ingredients: bolognese.get('ingredients')
    });
    anotherBolognese = new EatListRecipe({
      baseRecipe: bolognese,
      ingredients: bolognese.get('ingredients')
    });
    finalBolognese = new EatListRecipe({
      baseRecipe: bolognese,
      ingredients: bolognese.get('ingredients')
    });
    eatlist = [myBolognese, anotherBolognese, finalBolognese];
    searchBox = $('#search');
    searchResultsBox = $('#searchResults');
    historyRecipesBox = $('#historyResults');
    errorBox = $('#error');
    errorTemplate = $('#errorTemplate').html();
    searchResultTemplate = $('#searchResultTemplate').html();
    historyRecipeTemplate = $('#historyRecipeTemplate').html();
    createRecipeFromJSON = function(jsonRecipe) {
      return new Recipe({
        url: jsonRecipe.url,
        rating: jsonRecipe.rating,
        imageUrl: jsonRecipe.imageUrl,
        isStarred: jsonRecipe.isStarred,
        name: jsonRecipe.name,
        id: 1,
        description: "This description should be changed"
      });
    };
    /* SEARCH
    */

    search = function(e) {
      var searchText;
      searchText = searchBox.val();
      return $.ajax("/" + userId + "/search?q=" + searchText, {
        success: searchResultHandler,
        error: errorHandler
      });
    };
    throttledSearch = _.throttle(search, 250);
    renderRecipe = function(template, recipe) {
      return _.template(template, recipe.attributeObject());
    };
    searchResultHandler = function(jsonResults) {
      var carousel, recipeResult, recipeResults, renderedResult, renderedResults, result, results, _i, _len;
      console.log("Returned");
      console.log(jsonResults);
      results = $.parseJSON(jsonResults).results;
      recipeResults = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = results.length; _i < _len; _i++) {
          result = results[_i];
          _results.push(createRecipeFromJSON(result));
        }
        return _results;
      })();
      renderedResults = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = recipeResults.length; _i < _len; _i++) {
          recipeResult = recipeResults[_i];
          _results.push(renderRecipe(searchResultTemplate, recipeResult));
        }
        return _results;
      })();
      searchResultsBox.html('');
      for (_i = 0, _len = renderedResults.length; _i < _len; _i++) {
        renderedResult = renderedResults[_i];
        searchResultsBox.append(renderedResult);
      }
      $('#searchResults .item:first').addClass('active');
      carousel = $('#searchResults').parent('.carousel');
      if (results.length > 0) {
        return carousel.removeClass('hidden').carousel();
      }
    };
    /* HISTORY
    */

    loadHistory = function() {
      console.log("Loading History...");
      return $.ajax("/" + userId + "/history", {
        success: historyHandler,
        error: errorHandler
      });
    };
    historyHandler = function(jsonHistory) {
      var historyRecipes, recipe, renderedHistoryRecipes, renderedRecipe, _i, _len, _results;
      historyRecipes = [bolognese, curry];
      renderedHistoryRecipes = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = historyRecipes.length; _i < _len; _i++) {
          recipe = historyRecipes[_i];
          _results.push(renderRecipe(historyRecipeTemplate, recipe));
        }
        return _results;
      })();
      historyRecipesBox.html('');
      _results = [];
      for (_i = 0, _len = renderedHistoryRecipes.length; _i < _len; _i++) {
        renderedRecipe = renderedHistoryRecipes[_i];
        _results.push(historyRecipesBox.append(renderedRecipe));
      }
      return _results;
    };
    renderHistoryRecipe = function(result) {
      return true;
    };
    /* ERROR HANDLING
    */

    errorHandler = function(reqObj) {
      var renderedTemplate;
      renderedTemplate = _.template(errorTemplate, {
        statusCode: 404
      });
      return errorBox.html(renderedTemplate);
    };
    searchBox.change(throttledSearch);
    return loadHistory();
  });

}).call(this);
